import 'package:flutter/material.dart';
import 'training_model.dart';
import 'database_helper.dart';

class AddTrainingPage extends StatefulWidget {
  final Training? training;

  AddTrainingPage({this.training});

  @override
  _AddTrainingPageState createState() => _AddTrainingPageState();
}

class _AddTrainingPageState extends State<AddTrainingPage> {
  late TextEditingController _typeController;
  late TextEditingController _durationController;
  final _formKey = GlobalKey<FormState>();
  String _selectedEmoji = 'üèãÔ∏è';

  final Map<String, String> workoutEmojis = {
    '–ö–∞—Ä–¥—ñ–æ': 'üèÉ',
    '–°–∏–ª–æ–≤–µ': 'üí™',
    '–ô–æ–≥–∞': 'üßò',
    '–ü—ñ–ª–∞—Ç–µ—Å': 'ü§∏',
    '–†–æ–∑—Ç—è–∂–∫–∞': 'ü¶µ',
    '–ü–ª–∞–≤–∞–Ω–Ω—è': 'üèä',
    '–í–µ–ª–æ—Å–∏–ø–µ–¥': 'üö¥',
    '–ë–æ–∫—Å': 'ü•ä',
    '–¢–∞–Ω—Ü—ñ': 'üíÉ',
    '–•–æ–¥—å–±–∞': 'üö∂',
  };

  @override
  void initState() {
    super.initState();
    _typeController = TextEditingController(text: widget.training?.type ?? '');
    _durationController = TextEditingController(
      text: widget.training?.duration.toString() ?? '',
    );
    _selectedEmoji = widget.training?.emoji ?? 'üèãÔ∏è';
  }

  Future<void> _saveTraining() async {
    if (_formKey.currentState!.validate()) {
      final training = Training(
        id: widget.training?.id,
        type: _typeController.text,
        duration: int.tryParse(_durationController.text) ?? 0,
        date: widget.training?.date ?? DateTime.now(),
        emoji: _selectedEmoji,
      );

      await DatabaseHelper.instance.insertTraining(training);
      Navigator.pop(context, training);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.training != null ? '–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è' : '–î–æ–¥–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è'),
        backgroundColor: Colors.blueAccent,
      ),
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [Colors.blue.shade100, Colors.white],
          ),
        ),
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Form(
            key: _formKey,
            child: Column(
              children: [
                DropdownButtonFormField<String>(
                  value: _typeController.text.isEmpty ? null : _typeController.text,
                  decoration: InputDecoration(
                    labelText: '–¢–∏–ø —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è',
                    border: OutlineInputBorder(),
                    filled: true,
                    fillColor: Colors.white,
                  ),
                  items: workoutEmojis.keys.map((String value) {
                    return DropdownMenuItem<String>(
                      value: value,
                      child: Row(
                        children: [
                          Text(workoutEmojis[value]!),
                          SizedBox(width: 10),
                          Text(value),
                        ],
                      ),
                    );
                  }).toList(),
                  onChanged: (value) {
                    setState(() {
                      _typeController.text = value!;
                      _selectedEmoji = workoutEmojis[value]!;
                    });
                  },
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return '–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è';
                    }
                    return null;
                  },
                ),
                SizedBox(height: 16),
                TextFormField(
                  controller: _durationController,
                  decoration: InputDecoration(
                    labelText: '–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å (—Ö–≤–∏–ª–∏–Ω–∏)',
                    border: OutlineInputBorder(),
                    filled: true,
                    fillColor: Colors.white,
                  ),
                  keyboardType: TextInputType.number,
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å';
                    }
                    if (int.tryParse(value) == null) {
                      return '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ';
                    }
                    return null;
                  },
                ),
                SizedBox(height: 24),
                ElevatedButton(
                  onPressed: _saveTraining,
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.blueAccent,
                    foregroundColor: Colors.white,
                    padding: EdgeInsets.symmetric(horizontal: 32, vertical: 16),
                  ),
                  child: Text(
                    widget.training != null ? '–ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏' : '–î–æ–¥–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è',
                    style: TextStyle(fontSize: 18),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}